import pandas as pd
import os

def check_tsv_file(file_path):
    print(f"üîç ƒêang ki·ªÉm tra file: {file_path}")

    if not os.path.exists(file_path):
        print("‚ùå File kh√¥ng t·ªìn t·∫°i.")
        return

    try:
        df = pd.read_csv(file_path, sep="\t", dtype=str)
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")
        return

    print(f"‚úÖ ƒê·ªçc th√†nh c√¥ng, s·ªë d√≤ng: {len(df)}")

    # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
    required_columns = {"audio_filepath", "duration", "text"}
    if not required_columns.issubset(df.columns):
        print(f"‚ùå Thi·∫øu c·ªôt: {required_columns - set(df.columns)}")
        return

    # Ki·ªÉm tra d√≤ng thi·∫øu d·ªØ li·ªáu
    missing_rows = df[df.isnull().any(axis=1)]
    if not missing_rows.empty:
        print(f"‚ùå C√≥ {len(missing_rows)} d√≤ng b·ªã thi·∫øu d·ªØ li·ªáu:")
        print(missing_rows)
    else:
        print("‚úÖ Kh√¥ng c√≥ d√≤ng n√†o thi·∫øu d·ªØ li·ªáu.")

    # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu b·∫•t th∆∞·ªùng (list, dict)
    for col in ["audio_filepath", "duration", "text"]:
        complex_rows = df[df[col].apply(lambda x: isinstance(x, (list, dict)))]
        if not complex_rows.empty:
            print(f"‚ùå C·ªôt '{col}' c√≥ gi√° tr·ªã ki·ªÉu list ho·∫∑c dict:")
            print(complex_rows)

    # Th·ª≠ chuy·ªÉn sang dataset TensorFlow
    try:
        import tensorflow as tf
        dataset_dict = {
            "audio_filepath": df["audio_filepath"].tolist(),
            "duration": df["duration"].tolist(),
            "text": df["text"].tolist()
        }
        _ = tf.data.Dataset.from_tensor_slices(dataset_dict)
        print("‚úÖ D·ªØ li·ªáu c√≥ th·ªÉ d√πng v·ªõi tf.data.Dataset.from_tensor_slices.")
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o Dataset TensorFlow: {e}")

# üëâ G·ªçi h√†m v·ªõi file th·∫≠t
check_tsv_file("Fspeaker_vivos_fpt_train_8.tsv")
